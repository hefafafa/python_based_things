"""<-----------------创建串------------------>"""

串列 = ['合法', 21, "合法法", 21.000, False]
print(串列)
print(type(串列))
# 双引号自动被改成了单引号,并且可以接受所有类型的数据
# 也就是说我们可以通过这个特性来串列里套串列,由于线x线的特性我们得到了面
# 也就是得到了一个二维数组
串列2 = [['x','y','z'], 
    ['a','b','c'], 
    [1,2,3]]
print(串列2)
# 当然你也可以再去套数组,甚至可以套五维六维数组.
# ^也许根据这种多位创表的方式可以解释维的体现^
"""<-----------------提取串------------------>"""

print(串列[0])
print(串列[1])
print(串列[2])

print(串列[-1])
print(串列[-2])
print(串列[-3])

print(串列2[1][2])
# print(串列2[[1][2]])这种是会报错的,因为你不能在一个列表里查询到一个名为[1][2]的列表
#我可以反向取出串列

"""<-----------------提取串2------------------>"""
tes = 串列.index('合法法')
print(f"'合法法'在串列的第{tes}位")
#当然可以往这里插入值
串列[0] = "hefa"
print(f"修改了,串列0是{串列[0]}")
print(串列)
串列.insert(1,"我")
print(串列)
#insert() 会把原来位置的数值顶掉并替换，会让后边的数值全部向后移动一位
串列.append(666)
print(串列)
#append() 会直接往串的最后加入数值
串列.extend(串列2)
print(串列)
#append() 会允许往串的最后加入一堆数值
del 串列[3]
print(串列)
串列.pop(3)
print(串列)

abc = 24
del abc
#del和pop虽然都可以删除一个元素，但是表示的东西不一样
# del是属于python的关键字,可以删除指定指定元素，甚至是之前定义过的东西
# pop属于是list里的一个function，所以才会有list.pop()这种形式
串列.remove(False)
print(串列)
#remove会移除第一个匹配项，且只能移除一个
串列2.clear()
print(串列2)
# clear会清除所有项
串列.count(21)
print(f"21 在串列里有{串列.count(21)}个")
print(f"串列里有{len(串列)}个元素")

"""<-----------------遍历------------------>"""
计数器 = 0

while 计数器 < len(串列):
    print(f"第{计数器}个元素是{串列[计数器]}")
    计数器 += 1

print(计数器)
计数器 = 0
print(计数器)

# for 计数器 in 串列:
#     print(f"第{计数器}个元素是{串列[计数器]}")
# 会报错，因为串列里并不只有数字，for要求 in str或者range（数字）

for 计数器 in range(len(串列)):
    print(f"第{计数器}个元素是{串列[计数器]}")

"""<-----------------遍历添加------------------>"""
串列3 = [1,2,3,4,5,6,7,8,9,10]
计数器 = 0

t = []
f = []

while 计数器 < len(串列3):
    if 串列3[计数器] % 2 == 0:
        t.append(串列3[计数器])
    计数器 += 1

计数器 = 0

for 计数器 in range(len(串列3)):
    if 串列3[计数器] % 2 != 0:
        f.append(串列3[计数器])

print(t)
print(f)